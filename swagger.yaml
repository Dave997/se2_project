swagger: '2.0'

info:
  version: '1.0'
  title: 'DEEO: Dynamic Exam Evaluation Online'
  description: Didactical project for Software Engineering 2 UniTN - Nathaniellee group

host: se2-project-nathaniellee.herokuapp.com

basePath: /api/v0.1
schemes:
- https

consumes:
- application/json
produces:
- application/json

paths:
  /users:
    get:
      summary: Return the list of all users
      produces:
        - application/json
      responses:
        200:
          description: An array of User IDs
          examples:
            'application/json':
                users: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - Users
      summary: Add a new User to the system
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: The User to create
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /users/{userId}:
    get:
      summary: Return the User with the specified ID
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
          description: The ID of the User
      responses:
        200:
          description: A User object
          schema:
            $ref: '#/definitions/User'
        400:
          description: The specified User ID is invalid
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing User
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
        description: The ID of the User
      - in: body
        name: User
        description: The User to update
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Updated
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a User
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: userId
        in: path
        description: User ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

  /exercises:
    get:
      summary: Return the list of all exercises
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                exercises: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - Exercises
      summary: Add a new Exercise to the system
      operationId: addExercise
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Exercise
        description: The Exercise to create
        required: true
        schema:
          $ref: '#/definitions/Exercise'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /exercises/{exerciseId}:
    get:
      summary: Return the Exercise with the specified ID
      parameters:
        - in: path
          name: exerciseId
          required: true
          type: integer
          description: The ID of the Exercise
      responses:
        200:
          description: A Exercise object
          schema:
            $ref: '#/definitions/Exercise'
        400:
          description: The specified Exercise ID is invalid
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Exercise
      operationId: updateExercise
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: exerciseId
        required: true
        type: integer
        description: The ID of the Exercise
      - in: body
        name: Exercise
        description: The Excercise to update
        required: true
        schema:
          $ref: '#/definitions/Exercise'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a Exercise
      operationId: deleteExercise
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: exerciseId
        in: path
        description: Exercise ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error



  /task:
    get:
      summary: Return the list of all tasks
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                exercises: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - Exercises
      summary: Add a new Task to the pool of all tasks
      operationId: addExercise
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Task
        description: The Task to create
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /task/{taskId}:
    get:
      summary: Return the Task with the specified ID
      parameters:
        - in: path
          name: taskId
          required: true
          type: integer
          description: The ID of the Task
      responses:
        200:
          description: A Task object
          schema:
            $ref: '#/definitions/Task'
        400:
          description: The specified Task ID is invalid
        404:
          description: A Task with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Task
      operationId: updateTask
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
        description: The ID of the Task
      - in: body
        name: Task
        description: The Task to update
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Task with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a Task
      operationId: deleteTask
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: taskId
        in: path
        description: Task ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Task with the specified ID was not found
        500:
          description: Internal server error

  /userGroup:
    get:
      summary: Return the list of all user groups
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                exercises: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - UserGroup
      summary: Add a new User Group to the groups
      operationId: addUserGroup
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: UserGroup
        description: The UserGroup to create
        required: true
        schema:
          $ref: '#/definitions/UserGroup'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /userGroup/{userGroupId}:
    get:
      summary: Return the Group of users with the specified ID
      parameters:
        - in: path
          name: userGroupId
          required: true
          type: integer
          description: The ID of the Group of users
      responses:
        200:
          description: A Group object
          schema:
            $ref: '#/definitions/UserGroup'
        400:
          description: The specified userGroup ID is invalid
        404:
          description: A group of users with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing User Group
      operationId: updateUserGroup
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: userGroupId
        required: true
        type: integer
        description: The ID of the User Group
      - in: body
        name: UserGroup
        description: The User Group to update
        required: true
        schema:
          $ref: '#/definitions/UserGroup'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A User Group with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete an User Group
      operationId: deleteUserGroup
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: userGroupId
        in: path
        description: User Group ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: An User Group with the specified ID was not found
        500:
          description: Internal server error

  /assignment:
    get:
      summary: Return the list of all assignments
      responses:
        200:
          description: An Assignment object
          schema:
            $ref: '#/definitions/Assignment'
        400:
          description: The specified Assignment ID is invalid
        404:
          description: An Assignment with the specified ID was not found
        500:
          description: Internal server error

    post:
      tags:
      - Exercises
      summary: Add a new Assignment to the pool of all tasks
      operationId: addAssignment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Assignment
        description: The Assignment to create
        required: true
        schema:
          $ref: '#/definitions/Assignment'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /assignment/{assignmentId}:
    get:
      summary: Return the Assignment with the specified ID
      parameters:
        - in: path
          name: assignmentId
          required: true
          type: integer
          description: The ID of the Assignment
      responses:
        200:
          description: An Assignment object
          schema:
            $ref: '#/definitions/Assignment'
        400:
          description: The specified Assignment ID is invalid
        404:
          description: An Assignment with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Assignment
      operationId: updateAssignment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: assignmentId
        required: true
        type: integer
        description: The ID of the Assignment
      - in: body
        name: Assignment
        description: The Assignment to update
        required: true
        schema:
          $ref: '#/definitions/Assignment'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: An Assignment with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete an Assignment
      operationId: deleteAssignment
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: assignmentId
        in: path
        description: Assignment ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: An Assignment with the specified ID was not found
        500:
          description: Internal server error

  /peerReviews:
    get:
      summary: Return the list of all peer reviews
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                peerReviews: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - PeerReviews
      summary: Add a new Peer Review to the system
      operationId: addPeerReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Peer Review
        description: The Peer Review to create
        required: true
        schema:
          $ref: '#/definitions/PeerReview'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /peerReviews/{peerReviewId}:
    get:
      summary: Return the Peer Review with the specified ID
      parameters:
        - in: path
          name: peerReviewId
          required: true
          type: integer
          description: The ID of the Peer Review
      responses:
        200:
          description: A Peer Review object
          schema:
            $ref: '#/definitions/PeerReview'
        400:
          description: The specified Peer Review ID is invalid
        401:
          description: Unauthorized
        404:
          description: A Peer Review with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Peer Review
      operationId: updatePeerReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: peerReviewId
        required: true
        type: integer
        description: The ID of the Peer Review
      - in: body
        name: PeerReview
        description: The Excercise to update
        required: true
        schema:
          $ref: '#/definitions/PeerReview'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Peer Review with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a Peer Review
      operationId: deletePeerReview
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: peerReviewId
        in: path
        description: Peer Review ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Peer Review with the specified ID was not found
        500:
          description: Internal server error

  /taskEvaluations:
    get:
      summary: Return the list of all task evaluations
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                taskEvaluations: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - TaskEvaluations
      summary: Add a new Task Evaluation to the system
      operationId: addTaskEvaluation
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Task Evaluation
        description: The Task Evaluation to create
        required: true
        schema:
          $ref: '#/definitions/TaskEvaluation'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /taskEvaluations/{taskEvaluationId}:
    get:
      summary: Return the Task Evaluation with the specified ID
      parameters:
        - in: path
          name: taskEvaluationId
          required: true
          type: integer
          description: The ID of the Task Evaluation
      responses:
        200:
          description: A Task Evaluation object
          schema:
            $ref: '#/definitions/TaskEvaluation'
        400:
          description: The specified Task Evaluation ID is invalid
        401:
          description: Unauthorized
        404:
          description: A Task Evaluation with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Task Evaluation
      operationId: updateTaskEvaluation
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: taskEvaluationId
        required: true
        type: integer
        description: The ID of the Task Evaluation
      - in: body
        name: TaskEvaluation
        description: The Excercise to update
        required: true
        schema:
          $ref: '#/definitions/TaskEvaluation'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Task Evaluation with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a Task Evaluation
      operationId: deleteTaskEvaluation
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: taskEvaluationId
        in: path
        description: Task Evaluation ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Task Evaluation with the specified ID was not found
        500:
          description: Internal server error

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        example: 123
        format: int64
      name:
        type: string
        example: Polpetta
      email:
        type: string
        example: polpetta@mail.it
    required:
      - id
      - name
      - email

  Exercise:
    type: object
    properties:
      id:
        type: integer
        example: 123
        format: int64
      name:
        type: string
        example: Polpetta
      type:
        type: string
        example: Text box
        enum: [Text box, Radio button, Check box, True or False]
    required:
      - id
      - name
      - type

  Submission:
    type: object
    properties:
      taskId:
        type: integer
        example: 123
        format: int64
      userId:
        type: integer
        example: 456
        format: int64
      answers:
        type: array
        items:
          type: object
          properties:
            exerciseId:
              type: integer
              example: 789
            value:
              type: string
              example: Polpetta
    required:
      - taskId
      - userId
      - answers

  PeerReview:
    type: object
    properties:
      submissionId:
        type: integer
        example: 123
        format: int64
      userId:
        type: integer
        example: 456
        format: int64
      answers:
        type: array
        items:
          type: object
          properties:
            exerciseId:
              type: integer
              example: 789
            value:
              type: string
              example: Polpetta
    required:
      - taskId
      - userId
      - answers

  Task:
    type: object
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      exercises:
        type: array
        items:
          type: integer
          example: 456
    required:
      - id
      - exercises

  UserGroup:
    type: object
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      users:
        type: array
        items:
          type: integer
          example: 456
    required:
      - id
      - name
      - users

  Assignment:
    type: object
    properties:
      taskId:
        type: integer
        example: 123
      userGroupId:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      deadline:
        type: string
        format: date-time
        example: 13/11/2018-10:40
    required:
      - taskId
      - userGroupId
      - deadline

  TaskEvaluation:
    type: object
    properties:
      mark:
        type: integer
        example: 30
      userId:
        description: The user that evaluates the submission
        type: integer
        example: 123
      submissionId:
        type: integer
        example: 456
      review:
        type: string
        example: Good job Polpetta!
    required:
      - mark
      - userId
      - submissionId
