swagger: '2.0'

info:
  version: '1.0'
  title: 'DEEO: Dynamic Exam Evaluation Online'
  description: Didactical project for Software Engineering 2 UniTN - Nathaniellee group

host: se2-project-nathaniellee.herokuapp.com

basePath: /api/v0.1
schemes:
- https

consumes:
- application/json
produces:
- application/json

paths:
  /users:
    get:
      summary: Return the list of all users
      # description: Description
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                users: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - Users
      summary: Add a new User to the store
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: The User to create
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /users/{userId}:
    get:
      summary: Return the User with the specified ID
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
          description: The ID of the User
      responses:
        200:
          description: A User object
          schema:
            $ref: '#/definitions/User'
        400:
          description: The specified User ID is invalid
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing User
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
          name: userId
          required: true
          type: integer
          description: The ID of the User
        - in: body
          name: User
          description: The User to update
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a User
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: userId
        in: path
        description: User ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A User with the specified ID was not found
        500:
          description: Internal server error

  /exercises:
    get:
      summary: Return the list of all exercises
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            'application/json':
                exercises: [180, 164, 245, 354]
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Internal server error

    post:
      tags:
      - Exercises
      summary: Add a new exercise to the store
      operationId: addExercise
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Exercise
        description: The exercise to create
        required: true
        schema:
          $ref: '#/definitions/Exercise'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /exercises/{exerciseId}:
    get:
      summary: Return the exercise with the specified ID
      parameters:
        - in: path
          name: exerciseId
          required: true
          type: integer
          description: The ID of the exercise
      responses:
        200:
          description: A Exercise object
          schema:
            $ref: '#/definitions/Exercise'
        400:
          description: The specified exercise ID is invalid
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error

    put:
      summary: Update an existing Exercise
      operationId: updateExercise
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Exercise
        description: The Exercise to update
        required: true
        schema:
          $ref: '#/definitions/Exercise'
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error

    delete:
      summary: Delete a Exercise
      operationId: deleteExercise
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: exerciseId
        in: path
        description: Exercise ID to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: A Exercise with the specified ID was not found
        500:
          description: Internal server error

  /task/{taskId}:
    get:
      summary: Return the task with the specified id
      parameters:
        - in: path
          name: taskId
          required: true
          type: integer
          description: The id of the task
      responses:
        200:
          description: A Task object
          schema:
            $ref: '#/definitions/Task'
        400:
          description: The specified task ID is invalid
        404:
          description: A task with the specified ID was not found
        500:
          description: Internal server error

  /userGroup/{userGroupId}:
    get:
      summary: Return the group of users with the specified id
      parameters:
        - in: path
          name: userGroupId
          required: true
          type: integer
          description: The id of the group of users
      responses:
        200:
          description: A Group object
          schema:
            $ref: '#/definitions/UserGroup'
        400:
          description: The specified userGroup ID is invalid
        404:
          description: A group of users with the specified ID was not found
        500:
          description: Internal server error

  /assignment/{assignmentId}:
    get:
      summary: Return the assignment with the specified id
      parameters:
        - in: path
          name: assignmentId
          required: true
          type: integer
          description: The id of the assignment
      responses:
        200:
          description: An Assignment object
          schema:
            $ref: '#/definitions/Assignment'
        400:
          description: The specified assignment ID is invalid
        404:
          description: An assignment with the specified ID was not found
        500:
          description: Internal server error

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        example: 123
        format: int64
      name:
        type: string
        example: Polpetta
      email:
        type: string
        example: polpetta@mail.it
    required:
      - id
      - name
      - email

  Exercise:
    type: object
    properties:
      id:
        type: integer
        example: 123
        format: int64
      name:
        type: string
        example: Polpetta
      type:
        type: string
        example: Text box
        enum: [Text box, Radio button, Check box, True or False]
    required:
      - id
      - name
      - type

  Submission:
    type: object
    properties:
      taskId:
        type: integer
        example: 123
        format: int64
      userId:
        type: integer
        example: 456
        format: int64
      answers:
        type: array
        items:
          type: object
          properties:
            exerciseId:
              type: integer
              example: 789
            value:
              type: string
              example: Polpetta
    required:
      - taskId
      - userId
      - answers

  PeerReview:
    type: object
    properties:
      submissionId:
        type: integer
        example: 123
        format: int64
      userId:
        type: integer
        example: 456
        format: int64
      answers:
        type: array
        items:
          type: object
          properties:
            exerciseId:
              type: integer
              example: 789
            value:
              type: string
              example: Polpetta
    required:
      - taskId
      - userId
      - answers

  Task:
    type: object
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      exercises:
        type: array
        items:
          type: integer
          example: 456
    required:
      - id
      - exercises
  
  UserGroup:
    type: object
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      users:
        type: array
        items:
          type: integer
          example: 456
    required:
      - id
      - name
      - users
  
  Assignment:
    type: object
    properties:
      taskId:
        type: integer
        example: 123
      userGroupId:
        type: integer
        example: 123
      name:
        type: string
        example: Polpetta
      deadline:
        type: string
        format: date-time
        example: 13/11/2018-10:40
    required:
      - taskId
      - userGroupId
      - deadline

  TaskEvaluation:
    type: object
    properties:
      mark:
        type: integer
        example: 30
      userId:
        description: The user that evaluates the submission
        type: integer
        example: 123
      submissionId:
        type: integer
        example: 456
      review:
        type: string
        example: Good job Polpetta!
    required:
      - mark
      - userId
      - submissionId